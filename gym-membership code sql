-- Creating the database for Gym Management
CREATE DATABASE IF NOT EXISTS GymManagement;
USE GymManagement;

-- 1. Creating the MembershipPlans table
CREATE TABLE IF NOT EXISTS MembershipPlans (
    plan_id INT AUTO_INCREMENT PRIMARY KEY,
    plan_name VARCHAR(100) NOT NULL,
    duration INT NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    benefits TEXT,
    created_at DATE NOT NULL DEFAULT '2025-06-01'
);

-- 2. Creating the Members table
CREATE TABLE IF NOT EXISTS Members (
    member_id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    date_of_birth DATE NOT NULL,
    contact_number VARCHAR(15) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    membership_plan_id INT,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    FOREIGN KEY (membership_plan_id) REFERENCES MembershipPlans(plan_id)
);

-- 3. Creating the AttendanceRecords table
CREATE TABLE IF NOT EXISTS AttendanceRecords (
    attendance_id INT AUTO_INCREMENT PRIMARY KEY,
    member_id INT,
    attendance_date DATE NOT NULL,
    status ENUM('Present', 'Absent') NOT NULL,
    FOREIGN KEY (member_id) REFERENCES Members(member_id)
);

-- 4. Creating the Payments table
CREATE TABLE IF NOT EXISTS Payments (
    payment_id INT AUTO_INCREMENT PRIMARY KEY,
    member_id INT,
    payment_date DATE NOT NULL,
    amount DECIMAL(10, 2) NOT NULL,
    payment_method ENUM('Cash', 'Credit Card', 'Bank Transfer') NOT NULL,
    payment_status ENUM('Completed', 'Pending') NOT NULL,
    FOREIGN KEY (member_id) REFERENCES Members(member_id)
);

-- Inserting Sample Data into MembershipPlans
INSERT INTO MembershipPlans (plan_name, duration, price, benefits) 
VALUES 
('Basic Plan', 6, 5000.00, 'Access to gym equipment'),
('Standard Plan', 12, 8000.00, 'Access to gym equipment + Group Classes'),
('Premium Plan', 12, 12000.00, 'Access to gym equipment + Group Classes + Personal Trainer');

-- Inserting Sample Data into Members
INSERT INTO Members (first_name, last_name, date_of_birth, contact_number, email, membership_plan_id, start_date, end_date)
VALUES 
('Jazib', 'Imran', '1990-03-15', '03001234567', 'jazibimran@example.com', 1, '2025-06-01', '2025-11-30'),
('Muhammad', 'Ahmed', '1985-06-20', '03211234567', 'ahmad@example.com', 2, '2025-06-01', '2026-06-01'),
('Ubaid', 'Ur Rehman', '1992-10-10', '03321234567', 'ubaid@example.com', 3, '2025-06-01', '2026-06-01'),
-- This member will not have an attendance record on 2025-06-01
('Ali', 'Khan', '1995-01-01', '03451234567', 'ali@example.com', 1, '2025-06-01', '2025-11-30');

-- Inserting Sample Data into AttendanceRecords
INSERT INTO AttendanceRecords (member_id, attendance_date, status) 
VALUES 
(1, '2025-06-01', 'Present'),
(1, '2025-06-02', 'Absent'),
(2, '2025-06-01', 'Present'),
(3, '2025-06-01', 'Present');

-- Inserting Sample Data into Payments
INSERT INTO Payments (member_id, payment_date, amount, payment_method, payment_status)
VALUES 
(1, '2025-06-01', 5000.00, 'Cash', 'Completed'),
(2, '2025-06-01', 8000.00, 'Credit Card', 'Completed'),
(3, '2025-06-01', 12000.00, 'Bank Transfer', 'Completed'),
(4, '2025-06-01', 5000.00, 'Cash', 'Pending'); -- For Ali Khan

-- 1. Get all members with their membership plans
SELECT m.first_name, m.last_name, mp.plan_name, m.start_date, m.end_date
FROM Members m
JOIN MembershipPlans mp ON m.membership_plan_id = mp.plan_id;

-- 2. Get attendance record for a specific member (jazib imran)
SELECT m.first_name, m.last_name, a.attendance_date, a.status
FROM AttendanceRecords a
JOIN Members m ON a.member_id = m.member_id
WHERE m.member_id = 1;

-- 3. Get all payments with their details
SELECT m.first_name, m.last_name, p.payment_date, p.amount, p.payment_method, p.payment_status
FROM Payments p
JOIN Members m ON p.member_id = m.member_id;

-- 4. Get all members who have not attended the gym on 2025-06-01
SELECT m.first_name, m.last_name
FROM Members m
LEFT JOIN AttendanceRecords a ON m.member_id = a.member_id AND a.attendance_date = '2025-06-01'
WHERE a.attendance_date IS NULL;

-- 5. Get all members who have expired membership (assuming today is 2025-06-01)
SELECT first_name, last_name, end_date
FROM Members
WHERE end_date < '2025-06-01';

-- 6. Get all attendance records for 2025-06-01
SELECT m.first_name, m.last_name, a.attendance_date, a.status
FROM AttendanceRecords a
JOIN Members m ON a.member_id = m.member_id
WHERE a.attendance_date = '2025-06-01';

-- 7. Get the total payments made by each member
SELECT m.first_name, m.last_name, SUM(p.amount) AS total_paid
FROM Payments p
JOIN Members m ON p.member_id = m.member_id
GROUP BY m.member_id;

-- 8. Get all members who have a premium membership plan
SELECT m.first_name, m.last_name, mp.plan_name
FROM Members m
JOIN MembershipPlans mp ON m.membership_plan_id = mp.plan_id
WHERE mp.plan_name = 'Premium Plan';

-- 9. Get the number of attendance records for each member
SELECT m.first_name, m.last_name, COUNT(a.attendance_id) AS attendance_count
FROM Members m
LEFT JOIN AttendanceRecords a ON m.member_id = a.member_id
GROUP BY m.member_id;

-- 10. Get all payment records that are still pending
SELECT m.first_name, m.last_name, p.payment_date, p.amount, p.payment_method
FROM Payments p
JOIN Members m ON p.member_id = m.member_id
WHERE p.payment_status = 'Pending';

-- 11. Get members who attended the gym more than 5 times between 2025-05-01 and 2025-05-31
SELECT m.first_name, m.last_name
FROM Members m
JOIN AttendanceRecords a ON m.member_id = a.member_id
WHERE a.attendance_date >= '2025-05-01' AND a.attendance_date <= '2025-05-31'
GROUP BY m.member_id
HAVING COUNT(a.attendance_id) > 5;

-- 12. Get all members who have not made a payment in the last 6 months before 2025-06-01
SELECT m.first_name, m.last_name
FROM Members m
LEFT JOIN Payments p ON m.member_id = p.member_id
WHERE p.payment_date < '2024-12-01' OR p.payment_date IS NULL;

-- 13. Get all members' details including membership plan name and payment details
SELECT m.first_name, m.last_name, mp.plan_name, p.amount, p.payment_status
FROM Members m
JOIN MembershipPlans mp ON m.membership_plan_id = mp.plan_id
JOIN Payments p ON m.member_id = p.member_id;

-- 14. Get the total revenue from all payments
SELECT SUM(amount) AS total_revenue
FROM Payments;

-- 15. Get all members who signed up on 2025-06-01
SELECT first_name, last_name
FROM Members
WHERE start_date = '2025-06-01';
